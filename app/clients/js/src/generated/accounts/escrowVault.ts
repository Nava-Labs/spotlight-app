/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';

export type EscrowVault = Account<EscrowVaultAccountData>;

export type EscrowVaultAccountData = {
  solVaultBump: number;
  totalSolAmount: bigint;
  signerAuthority: PublicKey;
};

export type EscrowVaultAccountDataArgs = {
  solVaultBump: number;
  totalSolAmount: number | bigint;
  signerAuthority: PublicKey;
};

export function getEscrowVaultAccountDataSerializer(): Serializer<
  EscrowVaultAccountDataArgs,
  EscrowVaultAccountData
> {
  return struct<EscrowVaultAccountData>(
    [
      ['solVaultBump', u8()],
      ['totalSolAmount', u64()],
      ['signerAuthority', publicKeySerializer()],
    ],
    { description: 'EscrowVaultAccountData' }
  ) as Serializer<EscrowVaultAccountDataArgs, EscrowVaultAccountData>;
}

export function deserializeEscrowVault(rawAccount: RpcAccount): EscrowVault {
  return deserializeAccount(rawAccount, getEscrowVaultAccountDataSerializer());
}

export async function fetchEscrowVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EscrowVault> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'EscrowVault');
  return deserializeEscrowVault(maybeAccount);
}

export async function safeFetchEscrowVault(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<EscrowVault | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeEscrowVault(maybeAccount) : null;
}

export async function fetchAllEscrowVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EscrowVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'EscrowVault');
    return deserializeEscrowVault(maybeAccount);
  });
}

export async function safeFetchAllEscrowVault(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<EscrowVault[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeEscrowVault(maybeAccount as RpcAccount));
}

export function getEscrowVaultGpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'spotlightPrograms',
    '3F8Um1EUHH2Jt24WYinPyHD4Qzd1DrWU8po25Rn1K9RE'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      solVaultBump: number;
      totalSolAmount: number | bigint;
      signerAuthority: PublicKey;
    }>({
      solVaultBump: [0, u8()],
      totalSolAmount: [1, u64()],
      signerAuthority: [9, publicKeySerializer()],
    })
    .deserializeUsing<EscrowVault>((account) =>
      deserializeEscrowVault(account)
    );
}

export function getEscrowVaultSize(): number {
  return 41;
}
